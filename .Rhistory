shinyWidgets::downloadBttn(
outputId = ns("download"),
label = "Download results",
style = "fill",
color = "primary",
size = "sm"
),
style = "text-align: center;
vertical-align: middle;
font-family: Poppins, sans-serif;
font-size: 18px"
)
} else {
div(
set_html_breaks(10),
paste0(sum(data$R), " null hypotheses were rejected. See full results by downloading below"),
set_html_breaks(2),
shinyWidgets::downloadBttn(
outputId = ns("download"),
label = "Download results",
style = "fill",
color = "primary",
size = "sm"
),
style = "text-align: center;
vertical-align: middle;
font-family: Poppins, sans-serif;
font-size: 18px;
.shiny-download-link{
width: 250px;
}
"
)
}
})
output$download <- downloadHandler(
filename = function() {
paste(file_string, Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write_csv(algorithm_result[[1]], file)
}
)
}
return(count_server_function)
}
LONDcountServer <- make_count_server_function(LONDresult, "LOND-")
LONDcountServer
make_count_server_function <- function(algorithm_result, file_string) {
count_server_function <- function(input, output, session, algorithm_result, file_string) {
ns <- session$ns
#toggle download button
observe({
toggle(id = "downloadbutton")
})
output$count <- renderUI({
data <- rlang::eval(algorithm_result)[[1]]
if(sum(data$R) == 1) {
div(
set_html_breaks(10),
paste0("1 null hypothesis was rejected. See full results by downloading below"),
set_html_breaks(2),
shinyWidgets::downloadBttn(
outputId = ns("download"),
label = "Download results",
style = "fill",
color = "primary",
size = "sm"
),
style = "text-align: center;
vertical-align: middle;
font-family: Poppins, sans-serif;
font-size: 18px"
)
} else {
div(
set_html_breaks(10),
paste0(sum(data$R), " null hypotheses were rejected. See full results by downloading below"),
set_html_breaks(2),
shinyWidgets::downloadBttn(
outputId = ns("download"),
label = "Download results",
style = "fill",
color = "primary",
size = "sm"
),
style = "text-align: center;
vertical-align: middle;
font-family: Poppins, sans-serif;
font-size: 18px;
.shiny-download-link{
width: 250px;
}
"
)
}
})
output$download <- downloadHandler(
filename = function() {
paste(file_string, Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write_csv(algorithm_result[[1]], file)
}
)
}
return(count_server_function)
}
LONDcountServer <- make_count_server_function(LONDresult, "LOND-")
LONDcountServer
LONDcountServer <- make_count_server_function(algorithm_resul = LONDresult, file_string = "LOND-")
LONDcountServer
make_count_server_function <- function(algorithm_result, file_string) {
count_server_function <- function(input, output, session) {
ns <- session$ns
#toggle download button
observe({
toggle(id = "downloadbutton")
})
output$count <- renderUI({
data <- rlang::eval(algorithm_result)[[1]]
if(sum(data$R) == 1) {
div(
set_html_breaks(10),
paste0("1 null hypothesis was rejected. See full results by downloading below"),
set_html_breaks(2),
shinyWidgets::downloadBttn(
outputId = ns("download"),
label = "Download results",
style = "fill",
color = "primary",
size = "sm"
),
style = "text-align: center;
vertical-align: middle;
font-family: Poppins, sans-serif;
font-size: 18px"
)
} else {
div(
set_html_breaks(10),
paste0(sum(data$R), " null hypotheses were rejected. See full results by downloading below"),
set_html_breaks(2),
shinyWidgets::downloadBttn(
outputId = ns("download"),
label = "Download results",
style = "fill",
color = "primary",
size = "sm"
),
style = "text-align: center;
vertical-align: middle;
font-family: Poppins, sans-serif;
font-size: 18px;
.shiny-download-link{
width: 250px;
}
"
)
}
})
output$download <- downloadHandler(
filename = function() {
paste(file_string, Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write_csv(algorithm_result[[1]], file)
}
)
}
return(count_server_function)
}
LONDcountServer <- make_count_server_function(algorithm_resul = LONDresult, file_string = "LOND-")
LONDcountServer
make_count_server_function <- function(algorithm_result, file_string) {
count_server_function <- function(input, output, session) {
ns <- session$ns
#toggle download button
observe({
toggle(id = "downloadbutton")
})
output$count <- renderUI({
data <- enexpr(algorithm_result)[[1]]
if(sum(data$R) == 1) {
div(
set_html_breaks(10),
paste0("1 null hypothesis was rejected. See full results by downloading below"),
set_html_breaks(2),
shinyWidgets::downloadBttn(
outputId = ns("download"),
label = "Download results",
style = "fill",
color = "primary",
size = "sm"
),
style = "text-align: center;
vertical-align: middle;
font-family: Poppins, sans-serif;
font-size: 18px"
)
} else {
div(
set_html_breaks(10),
paste0(sum(data$R), " null hypotheses were rejected. See full results by downloading below"),
set_html_breaks(2),
shinyWidgets::downloadBttn(
outputId = ns("download"),
label = "Download results",
style = "fill",
color = "primary",
size = "sm"
),
style = "text-align: center;
vertical-align: middle;
font-family: Poppins, sans-serif;
font-size: 18px;
.shiny-download-link{
width: 250px;
}
"
)
}
})
output$download <- downloadHandler(
filename = function() {
paste(file_string, Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write_csv(algorithm_result[[1]], file)
}
)
}
return(count_server_function)
}
LONDcountServer <- make_count_server_function(algorithm_resul = LONDresult, file_string = "LOND-")
LONDcountServer
power1 <- function(exp) {
function(x) {
x ^ exp
}
}
square <- power1(2)
sqyare
square
LONDcountServer <- make_count_server_function(algorithm_resul = LONDresult, file_string = "LOND-")
env_print(LONDcountServer)
rlang::env_print(LONDcountServer)
make_count_server_function <- function(algorithm_result, file_string) {
force(algorithm_result)
force(file_string)
count_server_function <- function(input, output, session) {
ns <- session$ns
#toggle download button
observe({
toggle(id = "downloadbutton")
})
output$count <- renderUI({
data <- algorithm_result[[1]]
if(sum(data$R) == 1) {
div(
set_html_breaks(10),
paste0("1 null hypothesis was rejected. See full results by downloading below"),
set_html_breaks(2),
shinyWidgets::downloadBttn(
outputId = ns("download"),
label = "Download results",
style = "fill",
color = "primary",
size = "sm"
),
style = "text-align: center;
vertical-align: middle;
font-family: Poppins, sans-serif;
font-size: 18px"
)
} else {
div(
set_html_breaks(10),
paste0(sum(data$R), " null hypotheses were rejected. See full results by downloading below"),
set_html_breaks(2),
shinyWidgets::downloadBttn(
outputId = ns("download"),
label = "Download results",
style = "fill",
color = "primary",
size = "sm"
),
style = "text-align: center;
vertical-align: middle;
font-family: Poppins, sans-serif;
font-size: 18px;
.shiny-download-link{
width: 250px;
}
"
)
}
})
output$download <- downloadHandler(
filename = function() {
paste(file_string, Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write_csv(algorithm_result[[1]], file)
}
)
}
return(count_server_function)
}
LONDcountServer <- make_count_server_function(algorithm_resul = LONDresult, file_string = "LOND-")
rlang::env_print(LONDcountServer)
LONDcountServer <- make_count_server_function(algorithm_result = LONDresult, file_string = "LOND-")
shiny::runApp()
View(ADDISUI)
#### FUNCTION FACTORY ####
make_count_server_function <- function(algorithm_result, file_string) {
force(file_string)
count_server_function <- function(input, output, session) {
ns <- session$ns
#toggle download button
observe({
toggle(id = "downloadbutton")
})
output$count <- renderUI({
data <- algorithm_result[[1]]
if(sum(data$R) == 1) {
div(
set_html_breaks(10),
paste0("1 null hypothesis was rejected. See full results by downloading below"),
set_html_breaks(2),
shinyWidgets::downloadBttn(
outputId = ns("download"),
label = "Download results",
style = "fill",
color = "primary",
size = "sm"
),
style = "text-align: center;
vertical-align: middle;
font-family: Poppins, sans-serif;
font-size: 18px"
)
} else {
div(
set_html_breaks(10),
paste0(sum(data$R), " null hypotheses were rejected. See full results by downloading below"),
set_html_breaks(2),
shinyWidgets::downloadBttn(
outputId = ns("download"),
label = "Download results",
style = "fill",
color = "primary",
size = "sm"
),
style = "text-align: center;
vertical-align: middle;
font-family: Poppins, sans-serif;
font-size: 18px;
.shiny-download-link{
width: 250px;
}
"
)
}
})
output$download <- downloadHandler(
filename = function() {
paste(file_string, Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write_csv(algorithm_result[[1]], file)
}
)
}
return(count_server_function)
}
runApp()
LONDcountServer
rlang::env_print
rlang::env_print(LONDcountServer())
rlang::env_print(LONDcountServer
)
LONDcountServer
LONDcountServer %>% rlang::env_print
LONDcountServer %>% rlang::env_print()
################################################################################
# About Page
#
# Author: Lathan Liou
# Created: Fri Sep 18 10:15:08 2020 ------------------------------
################################################################################
fluidPage(
fluidRow(
#### put input area here ####
column(12,
widgetUserBox(
title = "Lathan Liou",
subtitle = "Research Assistant @ MRC BSU",
type = NULL,
width = 12,
src = "https://www.mrc-bsu.cam.ac.uk/wp-content/uploads/2020/10/1q-cropped.png",
background = TRUE,
backgroundUrl = "https://images.pexels.com/photos/531880/pexels-photo-531880.jpeg?auto=compress&cs=tinysrgb&h=350",
closable = FALSE,
"Designed the onlineFDR app",
footer = p("Feel free to email any questions or comments to", a("Lathan", href= "mailto:lathan.liou@mrc-bsu.cam.ac.uk/"))
)
)# close column
), #close fluidrow
fluidRow(
column(12,
widgetUserBox(
title = "David Robertson",
subtitle = "Senior Research Associate @ MRC BSU",
type = NULL,
width = 12,
src = "https://www.mrc-bsu.cam.ac.uk/wp-content/uploads/2014/03/RobertsonDavid.jpg",
background = TRUE,
backgroundUrl = "https://c4.wallpaperflare.com/wallpaper/929/1017/70/city-lights-bokeh-lights-blurred-blurry-wallpaper-preview.jpg",
closable = FALSE,
"Developed the onlineFDR package",
footer = p("Feel free to email any questions or comments to", a("David", href= "mailto:david.robertson@mrc-bsu.cam.ac.uk/"))
)
) #close column
), #close fluidrow
fluidRow(
bsplus::bs_accordion(id = "about") %>%
bs_set_opts(panel_type = "primary", use_heading_link = T) %>%
bs_append(title = "Other contributors", p(
"Aaditya Ramdas",
br(),
"Adel Javanmard",
br(),
"Andrea Montanari",
br(),
"Jinjin Tian",
br(),
"Tijana Zrnic",
br(),
"Natasha A. Karp"
)) %>%
bs_append(title = "Package dependencies & credits", p(
"shinyWidgets",
br(),
"shinycssloaders",
br(),
"shinyjs",
br(),
"shinyBS",
br(),
"bsplus",
br(),
"shinyFeedback",
br(),
"shinydashboard",
br(),
"shinydashboardPlus",
br(),
"tippy",
br(),
"waiter",
br(),
"sever",
br(),
br(),
"tidyverse",
br(),
"plotly",
br(),
"lubridate",
br(),
"knitr",
style = "font-family: 'Consolas'"))
) #close fluidrow
) # close fluidpage
shiny::runApp()
devtools::install_github("https://github.com/dsrobertson/onlineFDR")
renv::snapshot()
?onlineFDR::SAFFRONstar
install_github("https://github.com/dsrobertson/onlineFDR")
devtools::install_github("https://github.com/dsrobertson/onlineFDR")
renv::snapshot()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
?p()
runApp()
runApp()
cogs_genotypes_path <- "lathan2_euro_icogs_imputed_dosages.txt"
shiny::runApp()
runApp()
?onlineFDR::ADDIS_spending
shiny::runApp()
runApp()
runApp()
?onlineFDR::Alpha_spending
?onlineFDR::online_fallback
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df <- read_csv("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFWER/sample.csv")
onlineFDR::Alpha_spending(df)
onlineFDR::Alpha_spending(df)[4]
onlineFDR::Alpha_spending(df)[4] %>% colnames()
View(ADDIS_spending_compServer)
